import tensorflow as tf
import cv2
import matplotlib.pyplot as plt
import numpy as np
import os
import tensorflow_hub as hub
import time

import warnings
warnings.filterwarnings('ignore')

file_path = os.path.dirname(os.path.abspath(__file__))
# Load the model
model = hub.load('https://tfhub.dev/google/movenet/multipose/lightning/1')

# Check the available signatures
print(model.signatures)

# Access a specific signature
signature = model.signatures['serving_default']

# Store the 'serving_default' signature of model object in the 'movenet' variable.
movenet = model.signatures['serving_default']

# Creating the instance of VideoCapture for capturing the video
cap = cv2.VideoCapture(0)

# Define the window and its size
cv2.namedWindow('MultiPose Estimation', cv2.WINDOW_NORMAL)
window_width = 1080
window_height = 720
cv2.resizeWindow("MultiPose Estimation", window_width, window_height)

# Initialize variables for emergency detection and notification outside the loop
emergency_detected = False
last_notification_time = time.time()

# Functions to Define
def draw_keypoints(frame, keypoints, confidence_threshold):
    y, x, c = frame.shape
    shaped = np.squeeze(np.multiply(keypoints, [y, x, 1]))

    for kp in shaped:
        ky, kx, kp_conf = kp
        if kp_conf > confidence_threshold:
            cv2.circle(frame, (int(kx), int(ky)), 5, (0, 255, 0), -1)  # Decreased circle size

EDGES = {
    (0, 1): 'm',
    (0, 2): 'c',
    (1, 3): 'm',
    (2, 4): 'c',
    (0, 5): 'm',
    (0, 6): 'c',
    (5, 7): 'm',
    (7, 9): 'm',
    (6, 8): 'c',
    (8, 10): 'c',
    (5, 6): 'y',
    (5, 11): 'm',
    (6, 12): 'c',
    (11, 12): 'y',
    (11, 13): 'm',
    (13, 15): 'm',
    (12, 14): 'c',
    (14, 16): 'c'
}

def draw_connections(frame, keypoints, edges, confidence_threshold):
    y, x, c = frame.shape
    shaped = np.squeeze(np.multiply(keypoints, [y, x, 1]))

    for edge, color in edges.items():
        p1, p2 = edge
        y1, x1, c1 = shaped[p1]
        y2, x2, c2 = shaped[p2]

        if (c1 > confidence_threshold) & (c2 > confidence_threshold):
            cv2.line(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 0, 0), 2)  # Decreased line thickness

def loop_through_people(frame, keypoints_with_scores, edges, confidence_threshold):
    for person in keypoints_with_scores:
        draw_connections(frame, person, edges, confidence_threshold)
        draw_keypoints(frame, person, confidence_threshold)

while True:
    ret, frame = cap.read()

    if not ret:
        break

    img = frame.copy()
    img = tf.image.resize_with_pad(tf.expand_dims(img, axis=0), 160, 288)
    input_img = tf.cast(img, dtype=tf.int32)

    results = movenet(input_img)
    keypoints_with_scores = results['output_0'].numpy()[:, :, :51].reshape((6, 17, 3))

    loop_through_people(frame, keypoints_with_scores, EDGES, 0.1)

    def detect_emergency(keypoints_with_scores, threshold=0.2):
        global emergency_detected, last_notification_time

        if not emergency_detected:
            for person in keypoints_with_scores:
                shoulder_left = person[5]
                shoulder_right = person[6]
                head = person[0]
                wrist_left = person[9]
                wrist_right = person[10]

                if abs(wrist_left[1] - head[1]) > threshold and abs(wrist_right[1] - head[1]) > threshold:
                    emergency_detected = True
                    last_notification_time = time.time()
                    return True
        else:
            # Check if 2 minutes (120 seconds) have passed since the last notification
            current_time = time.time()
            if current_time - last_notification_time >= 120:
                emergency_detected = False

        return False

    if detect_emergency(keypoints_with_scores):
        print("Emergency detected (hands raised)")
        cv2.putText(frame, "Emergency detected (hands raised)", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

    cv2.imshow('MultiPose Estimation', frame)

    if cv2.waitKey(1) == 27:
        break

cap.release()
cv2.destroyAllWindows()
